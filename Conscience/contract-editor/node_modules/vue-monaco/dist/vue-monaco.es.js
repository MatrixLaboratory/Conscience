import assign from 'nano-assign';

var MonacoEditor = {
  name: 'MonacoEditor',
  props: {
    value: String,
    theme: {
      type: String,
      default: 'vs'
    },
    language: String,
    options: Object,
    amdRequire: {
      type: Function
    }
  },
  model: {
    event: 'change'
  },
  watch: {
    options: {
      deep: true,

      handler: function handler(options) {
        if (this.editor) {
          this.editor.updateOptions(options);
        }
      }

    },

    value: function value(newValue) {
      if (this.editor) {
        if (newValue !== this.editor.getValue()) {
          this.editor.setValue(newValue);
        }
      }
    },

    language: function language(newVal) {
      if (this.editor) {
        window.monaco.editor.setModelLanguage(this.editor.getModel(), newVal);
      }
    },

    theme: function theme(newVal) {
      if (this.editor) {
        window.monaco.editor.setTheme(newVal);
      }
    }

  },

  mounted: function mounted() {
    var this$1 = this;

    if (this.amdRequire) {
      this.amdRequire(['vs/editor/editor.main'], function () {
        this$1.initMonaco(window.monaco);
      });
    } else {
      // ESM format so it can't be resolved by commonjs `require` in eslint
      // eslint-disable-next-line import/no-unresolved
      var monaco = require('monaco-editor');

      this.initMonaco(monaco);
    }
  },

  beforeDestroy: function beforeDestroy() {
    this.editor && this.editor.dispose();
  },

  methods: {
    initMonaco: function initMonaco(monaco) {
      var this$1 = this;

      var options = assign({
        value: this.value,
        theme: this.theme,
        language: this.language
      }, this.options);
      this.editor = monaco.editor.create(this.$el, options);
      this.$emit('editorDidMount', this.editor);
      this.editor.onContextMenu(function (event) { return this$1.$emit('contextMenu', event); });
      this.editor.onDidBlurEditorWidget(function () { return this$1.$emit('blur'); });
      this.editor.onDidBlurEditorText(function () { return this$1.$emit('blurText'); });
      this.editor.onDidChangeConfiguration(function (event) { return this$1.$emit('configuration', event); });
      this.editor.onDidChangeCursorPosition(function (event) { return this$1.$emit('position', event); });
      this.editor.onDidChangeCursorSelection(function (event) { return this$1.$emit('selection', event); });
      this.editor.onDidChangeModel(function (event) { return this$1.$emit('model', event); });
      this.editor.onDidChangeModelContent(function (event) {
        var value = this$1.editor.getValue();

        if (this$1.value !== value) {
          this$1.$emit('change', value, event);
        }
      });
      this.editor.onDidChangeModelDecorations(function (event) { return this$1.$emit('modelDecorations', event); });
      this.editor.onDidChangeModelLanguage(function (event) { return this$1.$emit('modelLanguage', event); });
      this.editor.onDidChangeModelOptions(function (event) { return this$1.$emit('modelOptions', event); });
      this.editor.onDidDispose(function (event) { return this$1.$emit('afterDispose', event); });
      this.editor.onDidFocusEditorWidget(function () { return this$1.$emit('focus'); });
      this.editor.onDidFocusEditorText(function () { return this$1.$emit('focusText'); });
      this.editor.onDidLayoutChange(function (event) { return this$1.$emit('layout', event); });
      this.editor.onDidScrollChange(function (event) { return this$1.$emit('scroll', event); });
      this.editor.onKeyDown(function (event) { return this$1.$emit('keydown', event); });
      this.editor.onKeyUp(function (event) { return this$1.$emit('keyup', event); });
      this.editor.onMouseDown(function (event) { return this$1.$emit('mouseDown', event); });
      this.editor.onMouseLeave(function (event) { return this$1.$emit('mouseLeave', event); });
      this.editor.onMouseMove(function (event) { return this$1.$emit('mouseMove', event); });
      this.editor.onMouseUp(function (event) { return this$1.$emit('mouseUp', event); });
    },

    getMonaco: function getMonaco() {
      return this.editor;
    },

    focus: function focus() {
      this.editor.focus();
    }

  },

  render: function render(h) {
    return h('div');
  }

};

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.component(MonacoEditor.name, MonacoEditor);
}

export default MonacoEditor;
